/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.foodcitymanagement.view;

import com.foodcitymanagement.controller.CustomerController;
import com.foodcitymanagement.controller.CustomerLoanController;
import com.foodcitymanagement.controller.ItemController;
import com.foodcitymanagement.controller.OrderController;
import com.foodcitymanagement.controller.OrderDetailController;
import com.foodcitymanagement.dto.Customer;
import com.foodcitymanagement.dto.CustomerLoan;
import com.foodcitymanagement.dto.Item;
import com.foodcitymanagement.dto.Order;
import com.foodcitymanagement.dto.OrderDetail;
import com.foodcitymanagement.other.DBBackupAndRestore;
import com.foodcitymanagement.other.IDGenerator;
import com.foodcitymanagement.other.ProgressBacup;
import com.foodcitymanagement.other.Validation;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.TableView;
import javax.swing.text.TableView.TableRow;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sanu Vithanage
 */
public class HomePage extends javax.swing.JFrame {

    private String itemName;
    private String orderQ;
    private double itemPrice;
    private String itemCode;
    private double amount = 0;
    DefaultTableModel defaultTable;
    private String upOrder;
    private boolean orderOK = false;
    //private String UserName;

    /**
     * Creates new form Loging
     */
    public HomePage() throws SQLException, ClassNotFoundException {
        initComponents();
        setTime();
        setDate();
        idset();
        mainPanel.setVisible(false);
        barcodeSearch.requestFocus();
        txtLoanID.setVisible(false);
        txtEarlyLend.setVisible(false);
        btnAddPrevious.setVisible(false);
        setExtendedState(MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        txtOrderDate = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        barcodeSearch = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        txtItemQuntity = new javax.swing.JTextField();
        txtOrderSearch = new javax.swing.JTextField();
        txtOrderAmount = new javax.swing.JTextField();
        txtItemPrice = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        btnItemMange = new javax.swing.JButton();
        btnBacup = new javax.swing.JButton();
        btnStock = new javax.swing.JButton();
        btnOrders = new javax.swing.JButton();
        btnFeedBack = new javax.swing.JButton();
        btnLend = new javax.swing.JButton();
        btnOrder = new javax.swing.JButton();
        txtTotalSum = new javax.swing.JTextField();
        txtOrderID = new javax.swing.JTextField();
        txtCusID = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        cmbCusType = new javax.swing.JComboBox();
        txtCustAddress = new javax.swing.JTextField();
        txtCustTp = new javax.swing.JTextField();
        txtCusName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtLoanID = new javax.swing.JTextField();
        txtEarlyLend = new javax.swing.JTextField();
        txtCash = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        txtDiscount = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnAddPrevious = new javax.swing.JButton();
        black = new javax.swing.JLabel();
        image = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setOpaque(false);
        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        timeLabel.setBackground(new java.awt.Color(255, 255, 255));
        timeLabel.setFont(new java.awt.Font("Jura", 1, 18)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(51, 51, 51));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeLabel.setText("08:02 PM");
        getContentPane().add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 120, 40));

        txtOrderDate.setBackground(new java.awt.Color(255, 255, 255));
        txtOrderDate.setFont(new java.awt.Font("Jura", 1, 18)); // NOI18N
        txtOrderDate.setForeground(new java.awt.Color(51, 51, 51));
        txtOrderDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtOrderDate.setText("2012-08-03");
        getContentPane().add(txtOrderDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 110, 40));

        jButton4.setBackground(new java.awt.Color(51, 51, 51));
        jButton4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("_");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jButton4.setContentAreaFilled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 10, 40, 35));

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("X");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jButton5.setContentAreaFilled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 10, 40, 35));

        orderTable.setFont(new java.awt.Font("Droid Sans", 0, 24)); // NOI18N
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemCode", "ItemName", "ItemPrice", "Quntity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderTableMouseClicked(evt);
            }
        });
        orderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                orderTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setResizable(false);
            orderTable.getColumnModel().getColumn(1).setResizable(false);
            orderTable.getColumnModel().getColumn(2).setResizable(false);
            orderTable.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 960, 470));

        barcodeSearch.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        barcodeSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                barcodeSearchCaretUpdate(evt);
            }
        });
        barcodeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeSearchActionPerformed(evt);
            }
        });
        barcodeSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                barcodeSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                barcodeSearchFocusLost(evt);
            }
        });
        barcodeSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barcodeSearchKeyReleased(evt);
            }
        });
        getContentPane().add(barcodeSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 360, 40));

        txtItemName.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtItemName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNameKeyPressed(evt);
            }
        });
        getContentPane().add(txtItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 250, 40));

        txtItemQuntity.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtItemQuntity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtItemQuntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemQuntityActionPerformed(evt);
            }
        });
        txtItemQuntity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemQuntityKeyPressed(evt);
            }
        });
        getContentPane().add(txtItemQuntity, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 250, 40));

        txtOrderSearch.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtOrderSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOrderSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderSearchActionPerformed(evt);
            }
        });
        txtOrderSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOrderSearchKeyPressed(evt);
            }
        });
        getContentPane().add(txtOrderSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, 250, 40));

        txtOrderAmount.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtOrderAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOrderAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderAmountActionPerformed(evt);
            }
        });
        txtOrderAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOrderAmountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOrderAmountFocusLost(evt);
            }
        });
        txtOrderAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOrderAmountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOrderAmountKeyReleased(evt);
            }
        });
        getContentPane().add(txtOrderAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 120, 40));

        txtItemPrice.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtItemPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtItemPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemPriceKeyPressed(evt);
            }
        });
        getContentPane().add(txtItemPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 250, 40));

        btnCalculate.setBackground(new java.awt.Color(51, 51, 51));
        btnCalculate.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        btnCalculate.setForeground(new java.awt.Color(255, 255, 255));
        btnCalculate.setText("Calculate");
        btnCalculate.setContentAreaFilled(false);
        btnCalculate.setOpaque(true);
        btnCalculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCalculateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCalculateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCalculateMouseExited(evt);
            }
        });
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        getContentPane().add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 580, 170, 60));

        btnItemMange.setBackground(new java.awt.Color(51, 51, 51));
        btnItemMange.setFont(new java.awt.Font("Jura", 0, 14)); // NOI18N
        btnItemMange.setForeground(new java.awt.Color(255, 255, 255));
        btnItemMange.setText("Item Manage");
        btnItemMange.setBorder(null);
        btnItemMange.setContentAreaFilled(false);
        btnItemMange.setOpaque(true);
        btnItemMange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnItemMangeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnItemMangeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnItemMangeMouseExited(evt);
            }
        });
        btnItemMange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemMangeActionPerformed(evt);
            }
        });
        btnItemMange.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnItemMangeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnItemMangeFocusLost(evt);
            }
        });
        btnItemMange.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnItemMangeKeyPressed(evt);
            }
        });
        getContentPane().add(btnItemMange, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 50, 100, 40));

        btnBacup.setBackground(new java.awt.Color(51, 51, 51));
        btnBacup.setFont(new java.awt.Font("Jura", 0, 14)); // NOI18N
        btnBacup.setForeground(new java.awt.Color(255, 255, 255));
        btnBacup.setText("BackUp");
        btnBacup.setBorder(null);
        btnBacup.setContentAreaFilled(false);
        btnBacup.setOpaque(true);
        btnBacup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBacupMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBacupMouseExited(evt);
            }
        });
        btnBacup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBacupActionPerformed(evt);
            }
        });
        btnBacup.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnBacupFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnBacupFocusLost(evt);
            }
        });
        btnBacup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBacupKeyPressed(evt);
            }
        });
        getContentPane().add(btnBacup, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 50, 100, 40));

        btnStock.setBackground(new java.awt.Color(51, 51, 51));
        btnStock.setFont(new java.awt.Font("Jura", 0, 14)); // NOI18N
        btnStock.setForeground(new java.awt.Color(255, 255, 255));
        btnStock.setText("Stock");
        btnStock.setBorder(null);
        btnStock.setContentAreaFilled(false);
        btnStock.setOpaque(true);
        btnStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStockMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnStockMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnStockMouseExited(evt);
            }
        });
        btnStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockActionPerformed(evt);
            }
        });
        btnStock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnStockFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnStockFocusLost(evt);
            }
        });
        btnStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnStockKeyPressed(evt);
            }
        });
        getContentPane().add(btnStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 100, 40));

        btnOrders.setBackground(new java.awt.Color(51, 51, 51));
        btnOrders.setFont(new java.awt.Font("Jura", 0, 14)); // NOI18N
        btnOrders.setForeground(new java.awt.Color(255, 255, 255));
        btnOrders.setText("Orders");
        btnOrders.setBorder(null);
        btnOrders.setContentAreaFilled(false);
        btnOrders.setOpaque(true);
        btnOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOrdersMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnOrdersMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnOrdersMouseExited(evt);
            }
        });
        btnOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdersActionPerformed(evt);
            }
        });
        btnOrders.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnOrdersFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnOrdersFocusLost(evt);
            }
        });
        btnOrders.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnOrdersKeyPressed(evt);
            }
        });
        getContentPane().add(btnOrders, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 50, 100, 40));

        btnFeedBack.setBackground(new java.awt.Color(51, 51, 51));
        btnFeedBack.setFont(new java.awt.Font("Jura", 0, 14)); // NOI18N
        btnFeedBack.setForeground(new java.awt.Color(255, 255, 255));
        btnFeedBack.setText("Refresh");
        btnFeedBack.setBorder(null);
        btnFeedBack.setContentAreaFilled(false);
        btnFeedBack.setOpaque(true);
        btnFeedBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnFeedBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnFeedBackMouseExited(evt);
            }
        });
        btnFeedBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFeedBackActionPerformed(evt);
            }
        });
        btnFeedBack.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnFeedBackFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnFeedBackFocusLost(evt);
            }
        });
        btnFeedBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFeedBackKeyPressed(evt);
            }
        });
        getContentPane().add(btnFeedBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, 100, 40));

        btnLend.setBackground(new java.awt.Color(51, 51, 51));
        btnLend.setFont(new java.awt.Font("Jura", 0, 14)); // NOI18N
        btnLend.setForeground(new java.awt.Color(255, 255, 255));
        btnLend.setText("Lend List");
        btnLend.setBorder(null);
        btnLend.setContentAreaFilled(false);
        btnLend.setOpaque(true);
        btnLend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLendMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLendMouseExited(evt);
            }
        });
        btnLend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLendActionPerformed(evt);
            }
        });
        btnLend.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnLendFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnLendFocusLost(evt);
            }
        });
        btnLend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnLendKeyPressed(evt);
            }
        });
        getContentPane().add(btnLend, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 50, 100, 40));

        btnOrder.setBackground(new java.awt.Color(51, 102, 0));
        btnOrder.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        btnOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnOrder.setText("Order");
        btnOrder.setContentAreaFilled(false);
        btnOrder.setOpaque(true);
        btnOrder.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnOrderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnOrderFocusLost(evt);
            }
        });
        btnOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOrderMouseClicked(evt);
            }
        });
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });
        btnOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnOrderKeyPressed(evt);
            }
        });
        getContentPane().add(btnOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 650, 180, 60));

        txtTotalSum.setEditable(false);
        txtTotalSum.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtTotalSum.setForeground(new java.awt.Color(255, 0, 102));
        txtTotalSum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTotalSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalSumActionPerformed(evt);
            }
        });
        txtTotalSum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTotalSumKeyPressed(evt);
            }
        });
        getContentPane().add(txtTotalSum, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 580, 170, 60));

        txtOrderID.setEditable(false);
        txtOrderID.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtOrderID.setForeground(new java.awt.Color(51, 51, 51));
        txtOrderID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOrderID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOrderIDKeyPressed(evt);
            }
        });
        getContentPane().add(txtOrderID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 350, 250, 40));

        txtCusID.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtCusID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCusID.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCusIDCaretUpdate(evt);
            }
        });
        txtCusID.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtCusIDPropertyChange(evt);
            }
        });
        txtCusID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCusIDKeyReleased(evt);
            }
        });
        getContentPane().add(txtCusID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 250, 40));

        removeButton.setBackground(new java.awt.Color(255, 102, 102));
        removeButton.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove");
        removeButton.setContentAreaFilled(false);
        removeButton.setOpaque(true);
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
        });
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 580, 180, 60));

        addButton.setBackground(new java.awt.Color(51, 51, 51));
        addButton.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add");
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addButtonMouseExited(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 120, 40));

        jLabel9.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Order QTY");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 250, 110, 40));

        jLabel8.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("QTY");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 150, 110, 40));

        jLabel11.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Price ");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 200, 110, 40));

        jLabel10.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Cust Type");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 300, 110, 40));

        cancelButton.setBackground(new java.awt.Color(102, 102, 0));
        cancelButton.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.setContentAreaFilled(false);
        cancelButton.setOpaque(true);
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cancelButtonFocusLost(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelButtonKeyPressed(evt);
            }
        });
        getContentPane().add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 650, 180, 60));

        cmbCusType.setFont(new java.awt.Font("Jura", 1, 18)); // NOI18N
        cmbCusType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Lend" }));
        cmbCusType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCusTypeItemStateChanged(evt);
            }
        });
        cmbCusType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCusTypeKeyPressed(evt);
            }
        });
        getContentPane().add(cmbCusType, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, 120, 40));

        txtCustAddress.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtCustAddress.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCustAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustAddressKeyPressed(evt);
            }
        });
        getContentPane().add(txtCustAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 550, 250, 40));

        txtCustTp.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtCustTp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCustTp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustTpKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustTpKeyReleased(evt);
            }
        });
        getContentPane().add(txtCustTp, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 600, 250, 40));

        txtCusName.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtCusName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCusName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCusNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCusNameKeyReleased(evt);
            }
        });
        getContentPane().add(txtCusName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 500, 250, 40));

        jLabel12.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Tp No ");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 600, 110, 40));

        btnUpdate.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdate.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setContentAreaFilled(false);
        btnUpdate.setOpaque(true);
        btnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnUpdateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnUpdateMouseExited(evt);
            }
        });
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        btnUpdate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnUpdateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnUpdateFocusLost(evt);
            }
        });
        btnUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnUpdateKeyPressed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 650, 170, 60));

        jLabel13.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Address ");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 550, 140, 40));

        jLabel14.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Name ");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 500, 120, 40));

        jLabel17.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Order ID");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 350, 110, 40));

        jLabel15.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Order Search");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 400, 110, 40));

        txtLoanID.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtLoanID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLoanID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLoanIDActionPerformed(evt);
            }
        });
        txtLoanID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLoanIDKeyPressed(evt);
            }
        });
        getContentPane().add(txtLoanID, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 300, 120, 40));

        txtEarlyLend.setEditable(false);
        txtEarlyLend.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtEarlyLend.setForeground(new java.awt.Color(255, 0, 51));
        txtEarlyLend.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEarlyLend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEarlyLendKeyReleased(evt);
            }
        });
        getContentPane().add(txtEarlyLend, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 650, 180, 60));

        txtCash.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtCash.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCashActionPerformed(evt);
            }
        });
        txtCash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCashKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCashKeyReleased(evt);
            }
        });
        getContentPane().add(txtCash, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 580, 180, 60));

        txtBalance.setEditable(false);
        txtBalance.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtBalance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBalance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBalanceKeyReleased(evt);
            }
        });
        getContentPane().add(txtBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 580, 180, 60));

        txtDiscount.setFont(new java.awt.Font("Jura", 0, 24)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(51, 153, 0));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiscountActionPerformed(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountKeyReleased(evt);
            }
        });
        getContentPane().add(txtDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 650, 170, 60));

        jLabel16.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("Cust ID ");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 450, 120, 40));

        jLabel4.setFont(new java.awt.Font("Jura", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Item Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 100, 110, 40));

        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 670, 230, 60));

        btnAddPrevious.setBackground(new java.awt.Color(51, 51, 51));
        btnAddPrevious.setFont(new java.awt.Font("Jura", 0, 16)); // NOI18N
        btnAddPrevious.setForeground(new java.awt.Color(255, 255, 255));
        btnAddPrevious.setText("Add To Previou");
        btnAddPrevious.setContentAreaFilled(false);
        btnAddPrevious.setOpaque(true);
        btnAddPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddPreviousMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddPreviousMouseExited(evt);
            }
        });
        btnAddPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPreviousActionPerformed(evt);
            }
        });
        btnAddPrevious.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAddPreviousKeyPressed(evt);
            }
        });
        getContentPane().add(btnAddPrevious, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 720, 180, 30));

        black.setBackground(new java.awt.Color(102, 102, 102));
        black.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        black.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/foodcitymanagement/icon/5256514-blur-wallpaper.jpg"))); // NOI18N
        getContentPane().add(black, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 768));

        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/foodcitymanagement/icon/aa.png"))); // NOI18N
        image.setText("jLabel5");
        getContentPane().add(image, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 768));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setState(ICONIFIED);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        HomePageQuitForm form = new HomePageQuitForm();
        form.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void barcodeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeSearchActionPerformed
        try {
            String barCode = barcodeSearch.getText();

            Item searchItem = ItemController.searchItem(barCode);
            if (searchItem != null) {
                // searchItem.getCode();
                txtItemName.setText(searchItem.getDescription());
                txtItemQuntity.setText(Double.toString(searchItem.getQtyOnHand()));
                txtItemPrice.setText(Double.toString(searchItem.getUnitPrice()));;

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_barcodeSearchActionPerformed

    private void btnLendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLendActionPerformed
        LoadManageForm stockView = new LoadManageForm();
        stockView.setVisible(true);
    }//GEN-LAST:event_btnLendActionPerformed

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        if (orderTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Item Selected..!");
        } else {

            String selectType = cmbCusType.getSelectedItem().toString();
            ///Cash Customer////////////
            if (orderOK) {
                if (selectType.equals("Cash")) {
                    if (!txtCusName.getText().equals(null)) {
                        ////lendCustomer Registration/////////
                        String customerID = txtCusID.getText();
                        String customerName = txtCusName.getText();
                        String customerAddres = txtCustAddress.getText();
                        String customerTp = txtCustTp.getText();
                        Customer customer = new Customer(customerID, customerName, customerAddres, customerTp);
                        try {
                            boolean addCustomer = CustomerController.addCustomer(customer);

                            if (addCustomer) {
                                try {
                                    ///////Order ading//////////////////
                                    String oid = txtOrderID.getText();
                                    String date = txtOrderDate.getText();
                                    String custId = txtCusID.getText();
                                    double fullAmo = Double.parseDouble(txtTotalSum.getText());
                                    ///order////
                                    Order order = new Order(oid, date, custId);
                                    ///order details////
                                    ArrayList<OrderDetail> orderDetailses = new ArrayList<>();
                                    ////getting values from table/////
                                    for (int i = 0; i < orderTable.getRowCount(); i++) {
                                        String itemCode = (String) orderTable.getValueAt(i, 0);
                                        double unitprice = Double.parseDouble((String) orderTable.getValueAt(i, 2));
                                        double qty = Double.parseDouble((String) orderTable.getValueAt(i, 3));

                                        OrderDetail details = new OrderDetail(oid, itemCode, qty, unitprice, fullAmo);

                                        orderDetailses.add(details);
                                    }

                                    boolean addOrder = OrderController.addOrder(order, orderDetailses);

                                    if (addOrder) {
                                        //   JOptionPane.showMessageDialog(this, "Order Added....!");

                                        //  JOptionPane.showMessageDialog(this, "Thank you..Get Your Ticket");
                                        DefaultTableModel tableModel2 = (DefaultTableModel) orderTable.getModel();
                                        try {
                                            InputStream is = getClass().getResourceAsStream("foodCityReport.jrxml");
                                            JasperReport jr = JasperCompileManager.compileReport(is);
                                            HashMap hm = new HashMap();
                                            hm.put("OrderID", oid);
                                            hm.put("Total", fullAmo);

                                            JasperPrint jp = JasperFillManager.fillReport(jr, hm, new JRTableModelDataSource(tableModel2));
                                            // JasperViewer.viewReport(jp, false);
                                            JasperPrintManager.printReport(jp, false);
                                        } catch (JRException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        textM();
                                        barcodeSearch.requestFocus(true);
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Order Not Added...!");

                                    }
                                } catch (ClassNotFoundException ex) {
                                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (SQLException ex) {
                                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }

                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Input Customer Name..!");
                    }

                }

                //////lend Customer/////////////////
                if (selectType.equals("Lend")) {

                    if (!txtCusName.getText().equals(null)) {
                        ////lendCustomer Registration/////////
                        String customerID = txtCusID.getText();
                        String customerName = txtCusName.getText();
                        String customerAddres = txtCustAddress.getText();
                        String customerTp = txtCustTp.getText();
                        Customer customer = new Customer(customerID, customerName, customerAddres, customerTp);
                        try {
                            boolean addCustomer = CustomerController.addCustomer(customer);

                            if (addCustomer) {
                                try {
                                    ///////Order ading//////////////////
                                    String oid = txtOrderID.getText();
                                    String date = txtOrderDate.getText();
                                    String custId = txtCusID.getText();
                                    String loanId = txtLoanID.getText();
                                    double fullAmo = Double.parseDouble(txtTotalSum.getText());
                                    String cuDate = txtOrderDate.getText();
                                    ///order////
                                    Order order = new Order(oid, date, custId);
                                    ///order details////
                                    ArrayList<OrderDetail> orderDetailses = new ArrayList<>();
                                    //loan table////
                                    CustomerLoan customerLoan = new CustomerLoan(loanId, custId, customerName, oid, cuDate, fullAmo);
                                    ////getting values from table/////
                                    for (int i = 0; i < orderTable.getRowCount(); i++) {
                                        String itemCode = (String) orderTable.getValueAt(i, 0);
                                        double unitprice = Double.parseDouble((String) orderTable.getValueAt(i, 2));
                                        double qty = Double.parseDouble((String) orderTable.getValueAt(i, 3));

                                        OrderDetail details = new OrderDetail(oid, itemCode, qty, unitprice, fullAmo);

                                        orderDetailses.add(details);
                                    }

                                    boolean addOrder = OrderController.addOrder(order, orderDetailses);
                                    boolean addCustomerLoan = CustomerLoanController.addCustomerLoan(customerLoan);
                                    if (addOrder && addCustomerLoan) {
                                        // JOptionPane.showMessageDialog(this, "Order Added....!");
                                        // JOptionPane.showMessageDialog(this, "Thank you..Get Your Ticket");
                                        DefaultTableModel tableModel2 = (DefaultTableModel) orderTable.getModel();
                                        try {
                                            InputStream is = getClass().getResourceAsStream("foodCityReport.jrxml");
                                            JasperReport jr = JasperCompileManager.compileReport(is);
                                            HashMap hm = new HashMap();
                                            hm.put("OrderID", oid);
                                            hm.put("Total", fullAmo);

                                            JasperPrint jp = JasperFillManager.fillReport(jr, hm, new JRTableModelDataSource(tableModel2));
                                            //JasperViewer.viewReport(jp);
                                            JasperPrintManager.printReport(jp, false);
                                        } catch (JRException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        textM();
                                        txtLoanID.setVisible(false);
                                        txtEarlyLend.setVisible(false);
                                        btnAddPrevious.setVisible(false);
                                        cmbCusType.setSelectedItem("Cash");
                                        barcodeSearch.requestFocus(true);

                                    } else {
                                        JOptionPane.showMessageDialog(this, "Order Not Added...!");

                                    }
                                } catch (ClassNotFoundException ex) {
                                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (SQLException ex) {
                                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }

                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Input Customer Name..!");
                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "Pay Money First..!");
            }
        }
    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnItemMangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItemMangeMouseClicked


    }//GEN-LAST:event_btnItemMangeMouseClicked

    private void btnStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStockMouseClicked


    }//GEN-LAST:event_btnStockMouseClicked

    private void barcodeSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeSearchKeyReleased
//        try {
//            String barCode = barcodeSearch.getText();
//
//            Item searchItem = ItemController.searchItem(barCode);
//            if (searchItem != null) {
//                // searchItem.getCode();
//                txtItemName.setText(searchItem.getDescription());
//                txtItemQuntity.setText(Double.toString(searchItem.getQtyOnHand()));
//                txtItemPrice.setText(Double.toString(searchItem.getUnitPrice()));;
//
//            }
//
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
//        }


    }//GEN-LAST:event_barcodeSearchKeyReleased

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        String bCode = barcodeSearch.getText();
        String iName = txtItemName.getText();
        String iPrice = txtItemPrice.getText();
        String availableQ = txtItemQuntity.getText();
        String oDet = txtOrderAmount.getText();

        int use = Integer.parseInt(txtOrderAmount.getText());
        int qty = Integer.parseInt(txtItemQuntity.getText());

        int updateqty = qty - use;

        if (use > qty) {
            JOptionPane.showMessageDialog(this, "Not Enough Store Quntyty\\n Contac Supplyer..!");
        } else {

            try {
                DefaultTableModel defaultTable = (DefaultTableModel) orderTable.getModel();
                String[] tbob = {bCode, iName, iPrice, oDet};
                defaultTable.addRow(tbob);
                //////////////////////maintain logical stock////////////////////////////

                boolean isupdate = ItemController.updateItemQty(iName, updateqty);
                if (isupdate) {
                    barcodeSearch.setText(null);
                    txtItemName.setText(null);
                    txtItemQuntity.setText(null);
                    txtItemPrice.setText(null);
                    txtOrderAmount.setText(null);

                }
                stockUpdate();
                updateRowHeights();
                customerType();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_addButtonMouseClicked

    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked

    }//GEN-LAST:event_removeButtonMouseClicked

    private void orderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderTableMouseClicked
        itemName = orderTable.getValueAt(orderTable.getSelectedRow(), 1).toString();
        orderQ = orderTable.getValueAt(orderTable.getSelectedRow(), 3).toString();
        itemCode = orderTable.getValueAt(orderTable.getSelectedRow(), 0).toString();


    }//GEN-LAST:event_orderTableMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        boolean b = false;
        double valueAt = 0;
        int ro = 0;
        if (txtOrderAmount.getText().equals("")) {
        } else if (orderTable.getRowCount() == 0) {
            addItemToT();
        } else {

            //String text = barcodeSearch.getText();
            for (int i = 0; i < orderTable.getRowCount(); i++) {

                if (barcodeSearch.getText().equals(orderTable.getValueAt(i, 0))) {
                    b = true;

                }
            }
            if (b) {
                JOptionPane.showMessageDialog(this, "Item Duplicated");
            } else {

                String bCode = barcodeSearch.getText();
                String iName = txtItemName.getText();
                String iPrice = txtItemPrice.getText();
                String availableQ = txtItemQuntity.getText();
                String oDet = txtOrderAmount.getText();

                double use = 0;
                double qty = 0;
                try {
                    use = Double.parseDouble(txtOrderAmount.getText());
                    qty = Double.parseDouble(txtItemQuntity.getText());
                } catch (NumberFormatException e) {
                }

                double updateqty = qty - use;

                if (use > qty) {
                    JOptionPane.showMessageDialog(this, "Not Enough Store Quntyty\\n Contac Supplyer..!");
                } else {

                    try {
                        DefaultTableModel defaultTable = (DefaultTableModel) orderTable.getModel();
                        Object[] tbob = {bCode, iName, iPrice, oDet};
                        defaultTable.addRow(tbob);
                        //////////////////////maintain logical stock////////////////////////////

                        boolean isupdate = ItemController.updateItemQty(iName, updateqty);
                        if (isupdate) {
                            barcodeSearch.setText(null);
                            txtItemName.setText(null);
                            txtItemQuntity.setText(null);
                            txtItemPrice.setText(null);
                            txtOrderAmount.setText(null);

                        }
                        stockUpdate();
                        updateRowHeights();
                        customerType();
                        btnCalculate.doClick();
                        barcodeSearch.requestFocus(true);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        }


    }//GEN-LAST:event_addButtonActionPerformed

    private void btnCalculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalculateMouseClicked

    }//GEN-LAST:event_btnCalculateMouseClicked

    private void btnOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrderMouseClicked


    }//GEN-LAST:event_btnOrderMouseClicked

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked

    }//GEN-LAST:event_cancelButtonMouseClicked

    private void addButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseEntered
        addButton.setBackground(new Color(153, 23, 55));

    }//GEN-LAST:event_addButtonMouseEntered

    private void txtOrderAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderAmountActionPerformed

        boolean b = false;
        double valueAt = 0;
        int ro = 0;
        if (txtOrderAmount.getText().equals("")) {
        } else if (orderTable.getRowCount() == 0) {
            addItemToT();
        } else {

            //String text = barcodeSearch.getText();
            for (int i = 0; i < orderTable.getRowCount(); i++) {

                if (barcodeSearch.getText().equals(orderTable.getValueAt(i, 0))) {
                    b = true;

                }
            }
            if (b) {
                JOptionPane.showMessageDialog(this, "Item Duplicated");
            } else {

                String bCode = barcodeSearch.getText();
                String iName = txtItemName.getText();
                String iPrice = txtItemPrice.getText();
                String availableQ = txtItemQuntity.getText();
                String oDet = txtOrderAmount.getText();

                double use = 0;
                double qty = 0;
                try {
                    use = Double.parseDouble(txtOrderAmount.getText());
                    qty = Double.parseDouble(txtItemQuntity.getText());
                } catch (NumberFormatException e) {
                }

                double updateqty = qty - use;

                if (use > qty) {
                    JOptionPane.showMessageDialog(this, "Not Enough Store Quntyty\\n Contac Supplyer..!");
                } else {

                    try {
                        DefaultTableModel defaultTable = (DefaultTableModel) orderTable.getModel();
                        Object[] tbob = {bCode, iName, iPrice, oDet};
                        defaultTable.addRow(tbob);
                        //////////////////////maintain logical stock////////////////////////////

                        boolean isupdate = ItemController.updateItemQty(iName, updateqty);
                        if (isupdate) {
                            barcodeSearch.setText(null);
                            txtItemName.setText(null);
                            txtItemQuntity.setText(null);
                            txtItemPrice.setText(null);
                            txtOrderAmount.setText(null);

                        }
                        stockUpdate();
                        updateRowHeights();
                        customerType();
                        btnCalculate.doClick();
                        barcodeSearch.requestFocus(true);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        }

    }//GEN-LAST:event_txtOrderAmountActionPerformed

    private void btnLendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLendMouseClicked

    }//GEN-LAST:event_btnLendMouseClicked

    private void txtItemQuntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemQuntityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemQuntityActionPerformed

    private void txtOrderSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderSearchActionPerformed
        try {
            DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
            dtm.setRowCount(0);
            String orderSearch = txtOrderSearch.getText();

            Order order = OrderController.getOrder(orderSearch);
            if (order != null) {
                txtCusID.setText(order.getCustomerId());
                order.getDate();
                txtOrderID.setText(order.getId());
            }

            ArrayList<OrderDetail> orderDetail = OrderDetailController.getOrderDetail(orderSearch);
            if (orderDetail != null) {
                for (OrderDetail orderDetail1 : orderDetail) {
                    String itemCode1 = orderDetail1.getItemCode();
                    String description = ItemController.getDescription(itemCode1);

                    String[] br = {itemCode1, description, Double.toString(orderDetail1.getUnitPrice()), Double.toString(orderDetail1.getQty())};
                    dtm.addRow(br);
                }
                updateRowHeights();

            }
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtOrderSearchActionPerformed

    private void cmbCusTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCusTypeItemStateChanged
        String selectType = cmbCusType.getSelectedItem().toString();
        if (selectType.equals("Cash")) {
            // txtCusID.setText(null);
            txtCusName.setText("CashCustomer");
            txtCustAddress.setText("No details");
            txtCustTp.setText("No details");
            txtLoanID.setVisible(false);
            try {
                idset();

            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (selectType.equals("Lend")) {
            //txtCusID.setText(null);
            txtCusName.setText(null);
            txtCustAddress.setText(null);
            txtCustTp.setText(null);
            txtLoanID.setVisible(true);
            String LID;
            try {
                idset();

            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            try {
                LID = IDGenerator.getNewID3("customerLoan", "loanID", "LID");
                txtLoanID.setText(LID);

            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (selectType.equals("former")) {
            txtCusID.setText(null);
            txtCusName.setText(null);
            txtCustAddress.setText(null);
            txtCustTp.setText(null);
        }
    }//GEN-LAST:event_cmbCusTypeItemStateChanged

    private void addItemToT() {
        String bCode = barcodeSearch.getText();
        String iName = txtItemName.getText();
        String iPrice = txtItemPrice.getText();
        String availableQ = txtItemQuntity.getText();
        String oDet = txtOrderAmount.getText();

        double use = 0;
        double qty = 0;
        try {
            use = Double.parseDouble(txtOrderAmount.getText());
            qty = Double.parseDouble(txtItemQuntity.getText());
        } catch (NumberFormatException e) {
        }

        double updateqty = qty - use;

        if (use > qty) {
            JOptionPane.showMessageDialog(this, "Not Enough Store Quntyty\\n Contac Supplyer..!");
        } else {

            try {
                DefaultTableModel defaultTable = (DefaultTableModel) orderTable.getModel();
                Object[] tbob = {bCode, iName, iPrice, oDet};
                defaultTable.addRow(tbob);
                //////////////////////maintain logical stock////////////////////////////

                boolean isupdate = ItemController.updateItemQty(iName, updateqty);
                if (isupdate) {
                    barcodeSearch.setText(null);
                    txtItemName.setText(null);
                    txtItemQuntity.setText(null);
                    txtItemPrice.setText(null);
                    txtOrderAmount.setText(null);

                }
                stockUpdate();
                updateRowHeights();
                customerType();
                btnCalculate.doClick();
                barcodeSearch.requestFocus(true);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    private void btnOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrdersMouseClicked


    }//GEN-LAST:event_btnOrdersMouseClicked

    private void txtTotalSumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalSumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalSumActionPerformed

    private void txtCusIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCusIDKeyReleased

        try {
            String cusId = txtCusID.getText();

            Customer searchCustomer = CustomerController.searchCustomer(cusId);
            if (searchCustomer != null) {
                txtCusName.setText(searchCustomer.getName());
                txtCustAddress.setText(searchCustomer.getAddress());
                txtCustTp.setText(searchCustomer.getTpNo());

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCusIDKeyReleased

    private void txtCusIDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtCusIDPropertyChange

    }//GEN-LAST:event_txtCusIDPropertyChange

    private void txtCusIDCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCusIDCaretUpdate
        try {
            String cusId = txtCusID.getText();

            Customer searchCustomer = CustomerController.searchCustomer(cusId);
            if (searchCustomer != null) {
                txtCusName.setText(searchCustomer.getName());
                txtCustAddress.setText(searchCustomer.getAddress());
                txtCustTp.setText(searchCustomer.getTpNo());

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCusIDCaretUpdate

    private void btnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseClicked


    }//GEN-LAST:event_btnUpdateMouseClicked

    private void txtLoanIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLoanIDActionPerformed
        try {
            String loanID = txtLoanID.getText();
            CustomerLoan searchCustomerLoan = CustomerLoanController.searchCustomerLoan(loanID);
            if (searchCustomerLoan != null) {
                txtEarlyLend.setVisible(true);
                btnAddPrevious.setVisible(true);
                txtCusID.setText(searchCustomerLoan.getCusId());
                upOrder = searchCustomerLoan.getOrderId();
                txtEarlyLend.setText(Double.toString(searchCustomerLoan.getAmount()));
            } else {
                JOptionPane.showMessageDialog(this, "No Customer Loan");

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LoadManageForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(LoadManageForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtLoanIDActionPerformed

    private void btnAddPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPreviousActionPerformed

        double nowTotSum = Double.parseDouble(txtTotalSum.getText());
        double eatlyLend = Double.parseDouble(txtEarlyLend.getText());
        double totalSum = nowTotSum + eatlyLend;

        txtEarlyLend.setText(Double.toString(totalSum));
        totalSum = 0;
        int res = JOptionPane.showConfirmDialog(this, "Do you want to add this to previous \n Balance of this Customer..?", "CONFIRMATION", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (res == JOptionPane.YES_OPTION) {
            try {
                String loanID = txtLoanID.getText();
                String custId = txtCusID.getText();
                String customerName = txtCusName.getText();
                double nowLend = Double.parseDouble(txtEarlyLend.getText());
                String cuDate = txtOrderDate.getText();

                CustomerLoan customerLoan = new CustomerLoan(loanID, custId, customerName, upOrder, cuDate, nowLend);
                boolean updateCustomerLoan = CustomerLoanController.updateCustomerLoan(customerLoan, loanID);
                if (updateCustomerLoan) {
                    JOptionPane.showMessageDialog(this, "Susesfully Aded to the \n"
                            + "prevoius..!");
                    JOptionPane.showMessageDialog(this, "Thank you..Get Your Ticket");
                    DefaultTableModel tableModel2 = (DefaultTableModel) orderTable.getModel();
                    try {
                        InputStream is = getClass().getResourceAsStream("foodCityReport.jrxml");
                        JasperReport jr = JasperCompileManager.compileReport(is);
                        HashMap hm = new HashMap();
                        hm.put("OrderID", upOrder);
                        hm.put("Total", nowTotSum);

                        JasperPrint jp = JasperFillManager.fillReport(jr, hm, new JRTableModelDataSource(tableModel2));
                        JasperViewer.viewReport(jp);

                    } catch (JRException ex) {
                        Logger.getLogger(HomePage.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                    textM();
                    txtLoanID.setVisible(false);
                    txtEarlyLend.setVisible(false);
                    btnAddPrevious.setVisible(false);
                    cmbCusType.setSelectedItem("Cash");

                } else {
                    JOptionPane.showMessageDialog(this, "Previous Aded Faild..!");

                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            cmbCusType.setSelectedItem("Cash");
            txtLoanID.setVisible(false);
            txtEarlyLend.setVisible(false);
            btnAddPrevious.setVisible(false);
        }


    }//GEN-LAST:event_btnAddPreviousActionPerformed

    private void btnFeedBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFeedBackActionPerformed
        try {
            textM();
            cancelButton.doClick();
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFeedBackActionPerformed

    private void barcodeSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_barcodeSearchCaretUpdate


    }//GEN-LAST:event_barcodeSearchCaretUpdate

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        for (int i = 0; i < orderTable.getRowCount(); i++) {
            amount = amount + ((Double.parseDouble((String) orderTable.getValueAt(i, 2))) * (Double.parseDouble((String) orderTable.getValueAt(i, 3))));
        }
        txtTotalSum.setText(amount + "");
        amount = 0;
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void barcodeSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeSearchKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {

            txtItemName.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_PAGE_UP) {
            cmbCusType.setSelectedItem("Cash");

            txtCash.requestFocus(true);

        }
        if (keyCode == KeyEvent.VK_PAGE_DOWN) {
            cmbCusType.setSelectedItem("Lend");

            txtLoanID.requestFocus(true);
        }

        if (keyCode == KeyEvent.VK_RIGHT) {
            btnFeedBack.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            txtOrderAmount.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_SPACE) {
            orderTable.requestFocus(true);
        }
    }//GEN-LAST:event_barcodeSearchKeyPressed

    private void btnOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnOrderKeyPressed

        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            btnOrder.doClick();
        }
        if (keyCode == KeyEvent.VK_RIGHT) {
            cancelButton.requestFocus();
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            btnUpdate.requestFocus();
        }
    }//GEN-LAST:event_btnOrderKeyPressed

    private void txtCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCashActionPerformed
        double totSum = Double.parseDouble(txtTotalSum.getText());
        double cashP = Double.parseDouble(txtCash.getText());
        if (cashP >= totSum) {
            double balance = cashP - totSum;
            txtBalance.setText(Double.toString(balance));
            orderOK = true;

        } else {
            JOptionPane.showMessageDialog(this, "Inssuficent Balance");
        }


    }//GEN-LAST:event_txtCashActionPerformed

    private void txtDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiscountActionPerformed
        double totSum = Double.parseDouble(txtTotalSum.getText());
        double discount = Double.parseDouble(txtDiscount.getText());
        double discountAded = totSum - discount;
        txtTotalSum.setText(Double.toString(discountAded));
    }//GEN-LAST:event_txtDiscountActionPerformed

    private void btnBacupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBacupActionPerformed
        String path = "E:\\databasbac.sql";
        String username = "root";
        String password = "sanu9683";
        String dbname = "foodcity";
        String executeCmd = "<Path to MySQL>/bin/mysqldump -u " + username + " -p" + password + " --add-drop-database -B " + dbname + " -r " + path;
        Process runtimeProcess;
        try {
//            System.out.println(executeCmd);//this out put works in mysql shell
            runtimeProcess = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", executeCmd});
            System.out.println(executeCmd);
//            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();
            System.out.println("processComplete" + processComplete);
            if (processComplete == 0) {
                System.out.println("Backup created successfully");

            } else {
                System.out.println("Could not create the backup");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_btnBacupActionPerformed

    private void txtTotalSumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalSumKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            txtCash.requestFocus(true);
        }
    }//GEN-LAST:event_txtTotalSumKeyPressed

    private void txtCashKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCashKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {
            btnOrder.requestFocus(true);
        }
    }//GEN-LAST:event_txtCashKeyPressed

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            txtCash.requestFocus(true);
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void btnUpdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnUpdateKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_LEFT) {
            btnOrder.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            btnUpdate.doClick();
        }
    }//GEN-LAST:event_btnUpdateKeyPressed

    private void cancelButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            barcodeSearch.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            btnOrder.requestFocus(true);
        }
    }//GEN-LAST:event_cancelButtonKeyPressed

    private void btnFeedBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFeedBackKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            btnBacup.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            barcodeSearch.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            btnFeedBack.doClick();
        }
    }//GEN-LAST:event_btnFeedBackKeyPressed

    private void btnBacupKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBacupKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            btnStock.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            btnFeedBack.requestFocus(true);
        }
    }//GEN-LAST:event_btnBacupKeyPressed

    private void btnStockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnStockKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            btnOrders.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            btnBacup.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            btnStock.doClick();
        }
    }//GEN-LAST:event_btnStockKeyPressed

    private void btnOrdersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnOrdersKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            btnLend.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            btnStock.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            btnOrders.doClick();
        }
    }//GEN-LAST:event_btnOrdersKeyPressed

    private void btnLendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnLendKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            btnItemMange.requestFocus();
        }
        if (keyCode == KeyEvent.VK_LEFT) {
            btnOrders.requestFocus();
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            btnLend.doClick();
        }
    }//GEN-LAST:event_btnLendKeyPressed

    private void btnItemMangeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnItemMangeKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_RIGHT) {
            barcodeSearch.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_DOWN) {
            txtCash.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_ENTER) {
            btnItemMange.doClick();
        }
    }//GEN-LAST:event_btnItemMangeKeyPressed

    private void orderTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_LEFT) {
            barcodeSearch.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_DELETE) {
            removeTableV();
        }
        if (keyCode == KeyEvent.VK_RIGHT) {
            int selectedRow = orderTable.getSelectedRow();
            orderTable.editCellAt(selectedRow, 2);
        }
    }//GEN-LAST:event_orderTableKeyPressed

    private void txtItemNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {
            txtItemQuntity.requestFocus(true);
        }
    }//GEN-LAST:event_txtItemNameKeyPressed

    private void txtItemQuntityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemQuntityKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {
            txtItemPrice.requestFocus(true);
        }
    }//GEN-LAST:event_txtItemQuntityKeyPressed

    private void txtItemPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemPriceKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {
            txtOrderAmount.requestFocus(true);
        }
    }//GEN-LAST:event_txtItemPriceKeyPressed

    private void txtOrderAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderAmountKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {
            cmbCusType.requestFocus(true);
        }

    }//GEN-LAST:event_txtOrderAmountKeyPressed

    private void cmbCusTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCusTypeKeyPressed
        String selectedItem = cmbCusType.getSelectedItem().toString();
        if (selectedItem.equals("Cash")) {
            int keyCode = evt.getKeyCode();
            if (keyCode == KeyEvent.VK_ENTER) {
                txtCash.requestFocus(true);
            }
        } else {
            int keyCode = evt.getKeyCode();
            if (keyCode == KeyEvent.VK_ENTER) {
                txtLoanID.requestFocus(true);
            }

        }


    }//GEN-LAST:event_cmbCusTypeKeyPressed

    private void txtOrderIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderIDKeyPressed

    }//GEN-LAST:event_txtOrderIDKeyPressed

    private void txtOrderSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderSearchKeyPressed

    private void txtLoanIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLoanIDKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_DOWN) {
            txtCusName.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_RIGHT) {
            txtOrderID.requestFocus(true);
        }
    }//GEN-LAST:event_txtLoanIDKeyPressed

    private void txtCusNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCusNameKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            txtCustAddress.requestFocus(true);
        }
    }//GEN-LAST:event_txtCusNameKeyPressed

    private void txtCustAddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustAddressKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            txtCustTp.requestFocus(true);
        }
    }//GEN-LAST:event_txtCustAddressKeyPressed

    private void txtCustTpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustTpKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            btnAddPrevious.requestFocus(true);
        }
        if (keyCode == KeyEvent.VK_RIGHT) {
            txtCash.requestFocus(true);
        }
    }//GEN-LAST:event_txtCustTpKeyPressed

    private void btnAddPreviousKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAddPreviousKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            btnAddPrevious.requestFocus(true);
        }
    }//GEN-LAST:event_btnAddPreviousKeyPressed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (orderQ == null) {
            JOptionPane.showMessageDialog(this, "Select What You wanna Remove..!");
        } else {

            try {

                double qtyOnHand = Double.parseDouble(orderQ);
                Item findQtyByName = ItemController.findQtyByName(itemName);
                double findQty = findQtyByName.getQtyOnHand();
                double totalQty = findQty + qtyOnHand;
                boolean updateItemQty = ItemController.updateItemQty(itemName, totalQty);
                if (updateItemQty) {
                    int selectedRowCount = orderTable.getSelectedRowCount();
                    if (selectedRowCount > 0) {
                        for (int i = 0; i < selectedRowCount; i++) {
                            int selectedRow = orderTable.getSelectedRow();
                            ((DefaultTableModel) orderTable.getModel()).removeRow(selectedRow);
                            btnCalculate.doClick();
                            barcodeSearch.requestFocus(true);
                            // txtCash.setText(null);
                            txtBalance.setText(null);

                        }
                    }
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        orderQ = null;
    }//GEN-LAST:event_removeButtonActionPerformed

    private void orderTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyReleased
        btnCalculate.doClick();
    }//GEN-LAST:event_orderTableKeyReleased

    private void btnStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockActionPerformed

        StockManageForm stockView = new StockManageForm();
        stockView.setVisible(true);


    }//GEN-LAST:event_btnStockActionPerformed

    private void btnOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdersActionPerformed

        OrderViewForm stockView = new OrderViewForm();
        stockView.setVisible(true);

    }//GEN-LAST:event_btnOrdersActionPerformed

    private void btnItemMangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemMangeActionPerformed
//        mainPanel.setVisible(true);
//        ItemManage itemManager = new ItemManage();
//        mainPanel.removeAll();
//        mainPanel.add(itemManager);
//        mainPanel.updateUI();
//        itemManager.setVisible(true);

        ItemManageForm form = new ItemManageForm();
        form.setVisible(true);

    }//GEN-LAST:event_btnItemMangeActionPerformed

    private void txtOrderAmountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderAmountKeyReleased

    }//GEN-LAST:event_txtOrderAmountKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (orderTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Item Selected..!");
        } else {
            String oid = txtOrderSearch.getText();
            String oDate = txtOrderDate.getText();
            String cusID = txtCusID.getText();
            double totalSumP = Double.parseDouble(txtTotalSum.getText());

            Order orders = new Order(oid, oDate, cusID);
            ArrayList<OrderDetail> orderDetails = new ArrayList<>();
            for (int i = 0; i < orderTable.getRowCount(); i++) {
                String itemCode = (String) orderTable.getValueAt(i, 0);
                double unitPrice = Double.parseDouble((String) orderTable.getValueAt(i, 2));
                double qty = Double.parseDouble((String) orderTable.getValueAt(i, 3));

                OrderDetail orderDetail = new OrderDetail(oid, itemCode, qty, unitPrice, totalSumP);
                orderDetails.add(orderDetail);

            }
            try {
                boolean updateOredr = OrderController.updateOredr(orders, orderDetails, oid);
                if (updateOredr) {
                    DefaultTableModel tableModel22 = (DefaultTableModel) orderTable.getModel();
                    double fullAmo2 = Double.parseDouble(txtTotalSum.getText());

                    try {
                        InputStream is = getClass().getResourceAsStream("foodCityReport.jrxml");
                        JasperReport jr = JasperCompileManager.compileReport(is);
                        HashMap hm = new HashMap();
                        hm.put("OrderID", upOrder);
                        hm.put("Total", fullAmo2);

                        JasperPrint jp = JasperFillManager.fillReport(jr, hm, new JRTableModelDataSource(tableModel22));
                        // JasperViewer.viewReport(jp, false);
                        JasperPrintManager.printReport(jp, false);
                    } catch (JRException ex) {
                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Update Complete..!");
                    textM();
                    txtOrderSearch.setText(null);

                } else {
                    JOptionPane.showMessageDialog(this, "Failed to Update..!");

                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtCashKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCashKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtCash);

        }
    }//GEN-LAST:event_txtCashKeyReleased

    private void txtBalanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBalanceKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtBalance);

        }
    }//GEN-LAST:event_txtBalanceKeyReleased

    private void txtDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtDiscount);

        }
    }//GEN-LAST:event_txtDiscountKeyReleased

    private void txtEarlyLendKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEarlyLendKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtEarlyLend);

        }
    }//GEN-LAST:event_txtEarlyLendKeyReleased

    private void txtCustTpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustTpKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.phoneNumber(txtCustTp);

        }
    }//GEN-LAST:event_txtCustTpKeyReleased

    private void txtCusNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCusNameKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.name(txtCusName);

        }
    }//GEN-LAST:event_txtCusNameKeyReleased

    private void btnBacupMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBacupMouseEntered
        btnBacup.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnBacupMouseEntered

    private void btnFeedBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFeedBackMouseEntered
        btnFeedBack.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnFeedBackMouseEntered

    private void btnStockMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStockMouseEntered
        btnStock.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnStockMouseEntered

    private void btnOrdersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrdersMouseEntered
        btnOrders.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnOrdersMouseEntered

    private void btnLendMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLendMouseEntered
        btnLend.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnLendMouseEntered

    private void btnItemMangeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItemMangeMouseEntered
        btnItemMange.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnItemMangeMouseEntered

    private void btnFeedBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFeedBackMouseExited
        btnFeedBack.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnFeedBackMouseExited

    private void btnBacupMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBacupMouseExited
        btnBacup.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnBacupMouseExited

    private void btnStockMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStockMouseExited
        btnStock.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnStockMouseExited

    private void btnOrdersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrdersMouseExited
        btnOrders.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnOrdersMouseExited

    private void btnLendMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLendMouseExited
        btnLend.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnLendMouseExited

    private void btnItemMangeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItemMangeMouseExited
        btnItemMange.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnItemMangeMouseExited

    private void addButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseExited
        addButton.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_addButtonMouseExited

    private void btnCalculateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalculateMouseEntered
        btnCalculate.setBackground(new Color(153, 23, 55));

    }//GEN-LAST:event_btnCalculateMouseEntered

    private void btnCalculateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalculateMouseExited
        btnCalculate.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnCalculateMouseExited

    private void btnAddPreviousMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddPreviousMouseEntered
        btnAddPrevious.setBackground(new Color(0, 153, 153));
    }//GEN-LAST:event_btnAddPreviousMouseEntered

    private void btnAddPreviousMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddPreviousMouseExited
        btnAddPrevious.setBackground(new Color(51, 51, 51));

    }//GEN-LAST:event_btnAddPreviousMouseExited

    private void btnUpdateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseEntered
        btnUpdate.setBackground(new Color(153, 23, 55));

    }//GEN-LAST:event_btnUpdateMouseEntered

    private void btnUpdateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseExited
        btnUpdate.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnUpdateMouseExited

    private void btnFeedBackFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnFeedBackFocusGained
        btnFeedBack.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnFeedBackFocusGained

    private void btnFeedBackFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnFeedBackFocusLost
        btnFeedBack.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnFeedBackFocusLost

    private void barcodeSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeSearchFocusGained
        barcodeSearch.setSize(360, 43);

    }//GEN-LAST:event_barcodeSearchFocusGained

    private void barcodeSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeSearchFocusLost
        barcodeSearch.setSize(360, 40);
    }//GEN-LAST:event_barcodeSearchFocusLost

    private void txtOrderAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrderAmountFocusGained
        txtOrderAmount.setSize(120, 43);
    }//GEN-LAST:event_txtOrderAmountFocusGained

    private void txtOrderAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrderAmountFocusLost
        txtOrderAmount.setSize(120, 40);
    }//GEN-LAST:event_txtOrderAmountFocusLost

    private void btnOrderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnOrderFocusGained
        btnOrder.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnOrderFocusGained

    private void btnOrderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnOrderFocusLost
        btnOrder.setBackground(new Color(51, 102, 0));
    }//GEN-LAST:event_btnOrderFocusLost

    private void btnBacupFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnBacupFocusGained
        btnBacup.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnBacupFocusGained

    private void btnStockFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnStockFocusGained
        btnStock.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnStockFocusGained

    private void btnOrdersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnOrdersFocusGained
        btnOrders.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnOrdersFocusGained

    private void btnLendFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnLendFocusGained
        btnLend.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnLendFocusGained

    private void btnItemMangeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnItemMangeFocusGained
        btnItemMange.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnItemMangeFocusGained

    private void btnBacupFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnBacupFocusLost
        btnBacup.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnBacupFocusLost

    private void btnStockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnStockFocusLost
        btnStock.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnStockFocusLost

    private void btnOrdersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnOrdersFocusLost
        btnOrders.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnOrdersFocusLost

    private void btnLendFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnLendFocusLost
        btnLend.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnLendFocusLost

    private void btnItemMangeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnItemMangeFocusLost
        btnItemMange.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnItemMangeFocusLost

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (orderTable.getRowCount() == 0) {
            // JOptionPane.showMessageDialog(this, "No Item To CA..!");
        } else {
            try {
                ArrayList<Item> itemlist = new ArrayList<>();

                for (int j = 0; j < orderTable.getRowCount(); j++) {
                    int selectedRow = orderTable.getSelectedRow();
                    String code = orderTable.getValueAt(j, 0).toString();
                    String description = orderTable.getValueAt(j, 1).toString();
                    double unitPrice = Double.parseDouble(orderTable.getValueAt(j, 2).toString());
                    double qty = Double.parseDouble(orderTable.getValueAt(j, 3).toString());

                    Item item = new Item(code, description, unitPrice, qty);
                    itemlist.add(item);

                }

                ArrayList<Item> items = ItemController.getAllItems();

                ArrayList<Item> updatelist = new ArrayList<>();

                for (int j = 0; j < items.size(); j++) {
                    for (int k = 0; k < itemlist.size(); k++) {
                        if (items.get(j).getCode().equalsIgnoreCase(itemlist.get(k).getCode())) {

                            double updateqty = items.get(j).getQtyOnHand() + itemlist.get(k).getQtyOnHand();
                            Item item = new Item();
                            item.setCode(itemlist.get(k).getCode());
                            item.setDescription(itemlist.get(k).getDescription());
                            item.setQtyOnHand(updateqty);
                            item.setUnitPrice(itemlist.get(k).getUnitPrice());
                            updatelist.add(item);
                        }
                    }
                }

                boolean updated = ItemController.cancelQtyUpdate(updatelist);
                if (updated) {
                    JOptionPane.showMessageDialog(this, "Order Canceld..!");
                    textM();
                    txtTotalSum.setText(null);

                } else {
                    JOptionPane.showMessageDialog(this, "Order Canceld Faild..!");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void btnUpdateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnUpdateFocusGained
        btnUpdate.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_btnUpdateFocusGained

    private void btnUpdateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnUpdateFocusLost
        btnUpdate.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnUpdateFocusLost

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusGained
        cancelButton.setBackground(new Color(153, 23, 55));
    }//GEN-LAST:event_cancelButtonFocusGained

    private void cancelButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelButtonFocusLost
        cancelButton.setBackground(new Color(102, 102, 0));

    }//GEN-LAST:event_cancelButtonFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new HomePage().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField barcodeSearch;
    private javax.swing.JLabel black;
    private javax.swing.JButton btnAddPrevious;
    private javax.swing.JButton btnBacup;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnFeedBack;
    private javax.swing.JButton btnItemMange;
    private javax.swing.JButton btnLend;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnOrders;
    private javax.swing.JButton btnStock;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cmbCusType;
    private javax.swing.JLabel image;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JPanel mainPanel;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtCash;
    private javax.swing.JTextField txtCusID;
    private javax.swing.JTextField txtCusName;
    private javax.swing.JTextField txtCustAddress;
    private javax.swing.JTextField txtCustTp;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtEarlyLend;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtItemPrice;
    private javax.swing.JTextField txtItemQuntity;
    private javax.swing.JTextField txtLoanID;
    private javax.swing.JTextField txtOrderAmount;
    private javax.swing.JLabel txtOrderDate;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtOrderSearch;
    private javax.swing.JTextField txtTotalSum;
    // End of variables declaration//GEN-END:variables

    private void stockUpdate() {
        //ItemController.findQtyByName(itemName);
    }

    private void updateRowHeights() {
        for (int row = 0; row < orderTable.getRowCount(); row++) {
            int rowHeight = orderTable.getRowHeight();

            for (int column = 0; column < orderTable.getColumnCount(); column++) {
                Component comp = orderTable.prepareRenderer(orderTable.getCellRenderer(row, column), row, column);
                rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
            }

            orderTable.setRowHeight(row, rowHeight);
        }
    }

    private void textM() throws SQLException, ClassNotFoundException {
        txtCusID.setText(null);
        txtCusName.setText(null);
        txtCustAddress.setText(null);
        txtCustTp.setText(null);
        txtOrderID.setText(null);
        txtOrderSearch.setText(null);
        txtTotalSum.setText(null);
        txtEarlyLend.setVisible(false);
        btnAddPrevious.setVisible(false);
        txtBalance.setText(null);
        txtCash.setText(null);
        orderOK = false;
        idset();
        for (int j = 0; j < orderTable.getRowCount(); j++) {
            ((DefaultTableModel) orderTable.getModel()).removeRow(j);
        }
        for (int j = 0; j < orderTable.getRowCount(); j++) {
            ((DefaultTableModel) orderTable.getModel()).removeRow(j);
        }
        for (int j = 0; j < orderTable.getRowCount(); j++) {
            ((DefaultTableModel) orderTable.getModel()).removeRow(j);
        }
        for (int j = 0; j < orderTable.getRowCount(); j++) {
            ((DefaultTableModel) orderTable.getModel()).removeRow(j);
        }

    }

    int timeRun = 0;

    private void setTime() {

        new Thread() {
            public void run() {
                while (timeRun == 0) {
                    Calendar calendar = new GregorianCalendar();
                    int second = calendar.get(Calendar.SECOND);
                    int minute = calendar.get(Calendar.MINUTE);
                    int hour = calendar.get(Calendar.HOUR);
                    int am_pm = calendar.get(Calendar.AM_PM);

                    String day_night = "";
                    if (am_pm == 1) {
                        day_night = "PM";
                    } else {
                        day_night = "AM";
                    }

                    timeLabel.setText(hour + ":" + minute + ":" + second + ":" + day_night);
                }

            }

        }.start();

    }

    private void setDate() {
        Date today = new Date();

        SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd");
        String date = dateFormat.format(today);
        txtOrderDate.setText(date);

    }

    private void customerType() {
        String selectType = cmbCusType.getSelectedItem().toString();
        if (selectType.equals("Cash")) {
            // txtCusID.setText(null);
            txtCusName.setText("CashCustomer");
            txtCustAddress.setText("No details");
            txtCustTp.setText("No details");
        }
        if (selectType.equals("Lend")) {
            //txtCusID.setText(null);
            txtCusName.setText(null);
            txtCustAddress.setText(null);
            txtCustTp.setText(null);
        }
        if (selectType.equals("former")) {
            txtCusID.setText(null);
            txtCusName.setText(null);
            txtCustAddress.setText(null);
            txtCustTp.setText(null);
        }
    }

    private void idset() throws SQLException, ClassNotFoundException {
        String ORD;
        String CRD;
        ORD = IDGenerator.getNewID("orders", "orderId", "OI");
        CRD = IDGenerator.getNewID2("Customer", "cusid", "CI");
        txtOrderID.setText(ORD);
        txtCusID.setText(CRD);

    }

    private void removeTableV() {
        if (orderQ == null) {
            JOptionPane.showMessageDialog(this, "Select What You wanna Remove..!");
        } else {

            try {

                double qtyOnHand = Double.parseDouble(orderQ);
                Item findQtyByName = ItemController.findQtyByName(itemName);
                double findQty = findQtyByName.getQtyOnHand();
                double totalQty = findQty + qtyOnHand;
                boolean updateItemQty = ItemController.updateItemQty(itemName, totalQty);
                if (updateItemQty) {
                    int selectedRowCount = orderTable.getSelectedRowCount();
                    if (selectedRowCount > 0) {
                        for (int i = 0; i < selectedRowCount; i++) {
                            int selectedRow = orderTable.getSelectedRow();
                            ((DefaultTableModel) orderTable.getModel()).removeRow(selectedRow);
                            btnCalculate.doClick();
                            barcodeSearch.requestFocus(true);
                            txtBalance.setText(null);

                        }
                    }
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        orderQ = null;
    }
}
